iterator: AnimalPose.train_animalnet.Iterator
model: AnimalPose.models.AnimalPosenet
batch_size: 8 # 32 on quattro
num_steps: 160000
lr: 0.0001
cuda: True  # False -> use GPU
ckpt_freq: 2000
#Training methods
# Encoder pretrained by torchvision
pretrained: True
load_self_pretrained_encoder:
  active: False
  path: "load_weights/PosNet18.ckpt"
load_self_pretrained_decoder:
  active: False
  path: "load_weights/PosNet18.ckpt"
resnet_type: 18 #18, 50, 101,152
encoder_latent_dim: 256 # decoder latent dim is automatically set by encoder_latent_dim * (2 if encoder_2 else 1)
encoder_2: True

# True sets the encoder_1 variational
variational:
  active: True
  start_step: 5000
  stop_weight: 1
  kl_weight: 0.000001 # 0.00016 #1 #0.000001
  decay: False

# Losses
losses:
  L2: False
  KL: True
  perceptual: True
  perceptual_network: "vgg" # alex, squeeze or vgg
  perceptual_weight: 5.0
  #VGGL1Loss
  vgg: False
  vgg_l1_alpha: 1.0
  vgg_alpha: 1.0

LossConstrained:
  no_kl_for: 0
  eps: 0.35 # eps ist der maximal zul√§ssige reconstruction loss
  mu: 0.5 # mu ist hyperparameter wie stark der loss angepasst wird
  lambda_init: 10000

# logging
integrations:
  git:
    active: False
  wandb:
    active: True
  tensorboard:
    active: True
